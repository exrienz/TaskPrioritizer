name: Task Prioritizer CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Only run composer security check if composer.lock exists
      - name: Check if composer.lock exists
        id: check_composer
        run: |
          if [ -f "composer.lock" ]; then
            echo "composer_exists=true" >> $GITHUB_OUTPUT
          else
            echo "composer_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: PHP Security Check
        if: steps.check_composer.outputs.composer_exists == 'true'
        uses: StephaneBour/actions-php-security-checker@1.1
        
      # Alternative security scanning for non-Composer projects
      - name: Basic PHP File Security Scan
        run: |
          find . -name "*.php" -type f -exec php -l {} \;
          # Add more basic security checks here

  code-quality:
    name: Code Quality
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: sqlite3
      
      - name: PHP Syntax Check
        run: find . -name "*.php" -exec php -l {} \;
        
      - name: PHP Code Style Check
        run: |
          wget https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar
          php phpcs.phar --standard=PSR12 ./*.php

  build:
    name: Build and Test
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Build Docker Image
        run: |
          docker build -t task-prioritizer:${{ github.sha }} .
          docker save task-prioritizer:${{ github.sha }} > image.tar
          
      - name: Cache Docker Image
        uses: actions/cache@v3
        with:
          path: image.tar
          key: docker-${{ github.sha }}

  test:
    name: Integration Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Load Docker Image
        uses: actions/cache@v3
        with:
          path: image.tar
          key: docker-${{ github.sha }}
      
      - name: Run Container and Test
        run: |
          docker load < image.tar
          docker run -d -p 8080:80 --name test-container task-prioritizer:${{ github.sha }}
          sleep 10
          
          # Basic health check
          curl -f http://localhost:8080 || exit 1
          
          # Additional functional tests
          docker logs test-container
          docker inspect test-container --format='{{.State.Status}}'

  deploy-staging:
    name: Deploy to Staging
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Deploy to Staging Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull task-prioritizer:${{ github.sha }}
            docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - name: Deploy to Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull task-prioritizer:${{ github.sha }}
            docker-compose -f docker-compose.prod.yml up -d
